<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://lulubeanana17.github.io/tag/front-end/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lulubeanana17.github.io/" rel="alternate" type="text/html" />
  <updated>2021-10-09T11:32:26+13:00</updated>
  <id>https://lulubeanana17.github.io/tag/front-end/feed.xml</id>

  
  
  

  
    <title type="html">Siyoon Jung | </title>
  

  
    <subtitle>Any knowledges about software fundamental &amp; technics</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">JSON &amp;amp; XML</title>
      <link href="https://lulubeanana17.github.io/Json-xml" rel="alternate" type="text/html" title="JSON &amp; XML" />
      <published>2021-09-26T05:50:00+13:00</published>
      <updated>2021-09-26T05:50:00+13:00</updated>
      <id>https://lulubeanana17.github.io/Json-xml</id>
      <content type="html" xml:base="https://lulubeanana17.github.io/Json-xml">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;This is Python table of contents &lt;/span&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./frontend-basic&quot;&gt;front-end-basic&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./python-control-statement&quot;&gt;front-end-control-statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;--&gt;

&lt;p&gt;XML &amp;amp; JSON&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;XML&lt;br /&gt;&lt;br /&gt;
XML (eXtensible Markup Language) is a text-based data format as Markup language.&lt;br /&gt;
HTML only have fixed tags, the tages already have roles.&lt;br /&gt;However, XML can make any tages by
a user.&lt;br /&gt;XML can make new tags for new data independently.&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;JSON&lt;br /&gt;&lt;br /&gt;
JSON (JavaScript Object Notation) is a text-based data format and a lightweight data-interchange format. It transmits data between computers.&lt;br /&gt;&lt;br /&gt;
Nowadays, JSON is more popular than XML because it is light and easy to understand.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;JSON features&lt;br /&gt;&lt;br /&gt;
JSON is a plain text written in JavaScript object notation.&lt;br /&gt;
JSON can be translated to JavaScript Object through JavaScript.&lt;br /&gt;
JSON is language independent, JSON exists in many programming languages.&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Difference between XML and JSON&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;XML has tags covering data, which is similar to HTML tags.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;JSON has {} instead tags, and split ‘,’ data by data.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;JSON uses null, number, string, array, object, boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;The use of JSON&lt;br /&gt;&lt;br /&gt;
JSON is serialized to send data through network.&lt;br /&gt;
It is used for Web applications, server, API, and browsers.&lt;br /&gt;
It is also used for storing objects.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Issues of JSON&lt;br /&gt;&lt;br /&gt;
AJAX (Asynchronous JavaScript And XML) is a part of JavaScript that transfers data with servers.&lt;br /&gt;AJAX may send not JSON data but JavaScript itself, AJAX may not distinguish JSON and JavaScript.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;JSON is just data format.&lt;br /&gt;
To get the JSON data, they use XMLHttpRequest() function in JS,&lt;br /&gt;
this function only support the original server that JS is uploaded.&lt;br /&gt;
JSON is only available on the server having JS.&lt;br /&gt;
e.g. In google.com, we only can get JSON from Google, not other websites.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Siyoon Jung</name>
        
        
      </author>

      

      
        <category term="front-end" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">stackoverflow in javascript</title>
      <link href="https://lulubeanana17.github.io/stackoverflow" rel="alternate" type="text/html" title="stackoverflow in javascript" />
      <published>2021-09-18T04:50:00+12:00</published>
      <updated>2021-09-18T04:50:00+12:00</updated>
      <id>https://lulubeanana17.github.io/stackoverflow</id>
      <content type="html" xml:base="https://lulubeanana17.github.io/stackoverflow">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;This is Python table of contents &lt;/span&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./frontend-basic&quot;&gt;front-end-basic&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./python-control-statement&quot;&gt;front-end-control-statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;--&gt;

&lt;p&gt;Javascript is based on single thread and callback queue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/runtime-2.png&quot; alt=&quot;runtime2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The engine consists of memory heap and call stack.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Memory heap : memory allocation&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Callstack : stack the commands code by code&lt;br /&gt;&lt;br /&gt;
Runtime = The environment&lt;br /&gt;
Most developers use web API, which is not given by JS engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;callstack&lt;br /&gt;&lt;br /&gt;
It is data structure that logs where I am in a program, which means what commands completed.&lt;br /&gt;&lt;br /&gt;
Example (normal callstack)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/code-1.PNG&quot; alt=&quot;processimg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the call stack, result is&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/callstack-1.png&quot; alt=&quot;processimg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each steps of call stack are called “Stack Frame”.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Example (stack trace)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/code-2.PNG&quot; alt=&quot;processimg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stack trace is a statement of call stack when exception happened.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/stacktrace.png&quot; alt=&quot;processimg&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Example (stack overflow)&lt;br /&gt;&lt;br /&gt;
It shows when eternal loop is executed.&lt;br /&gt;
Call stack has maximum. When stack is over the maximum, it is called stack overflow.&lt;br /&gt;
And then, it blows the call stack, which is called “blowing the stack”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/code-3.PNG&quot; alt=&quot;processimg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/stackoverflow.png&quot; alt=&quot;processimg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/stackoverflow-error.png&quot; alt=&quot;processimg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Single thread is simple, but it has a lot of limitations.&lt;br /&gt;
To solve the limitation (slow), we use event loop and asynchronous.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Siyoon Jung</name>
        
        
      </author>

      

      
        <category term="front-end" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">event loop &amp;amp; callback queue in Javascript</title>
      <link href="https://lulubeanana17.github.io/eventloop-callbackqueue" rel="alternate" type="text/html" title="event loop &amp; callback queue in Javascript" />
      <published>2021-09-18T04:40:00+12:00</published>
      <updated>2021-09-18T04:40:00+12:00</updated>
      <id>https://lulubeanana17.github.io/eventloop-callbackqueue</id>
      <content type="html" xml:base="https://lulubeanana17.github.io/eventloop-callbackqueue">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;This is Python table of contents &lt;/span&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./frontend-basic&quot;&gt;front-end-basic&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./python-control-statement&quot;&gt;front-end-control-statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;--&gt;

&lt;p&gt;Event loop and callback queue in javascript
&lt;img src=&quot;../assets/built/images/callstack-1.png&quot; alt=&quot;processimg&quot; /&gt;
Javascript is single thread language, which means that the engine can take one task only,
because JS engine has only one call stack.&lt;br /&gt;
JS engine reads codes and add functions in call stack, after complete the function,
it removes them from call stack.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/runtime.PNG&quot; alt=&quot;processimg&quot; /&gt;
When developer makes codes in JS and activates it, JS engine reads the codes.&lt;br /&gt;
JS engine do interpreting the codes to bytecodes, and Virtual Machine does interpreting them
to machine codes. When codes are interpreting, the environment is called “Runtime”.&lt;br /&gt;&lt;br /&gt;
For example, Chrome uses V8 engine for JS. So, Chrome is Runtime.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Programming is judged by two concepts: Synchronous and Asynchronous.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Syncronous : only when one task is completed, the following one is unblocked&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Ansyncoronous : you can move to another task before the previous one finishes&lt;br /&gt;&lt;br /&gt;
Javascript is syncronous language, which is slow because it waits every events until response back. &lt;br /&gt;
So, Chrome supports several web API to use JS code by ansyncoronous.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;Ansyncoronous code can change the commands order. &lt;br /&gt;
For example, if there are first function and second function, second function can be activated faster than first function.&lt;br /&gt;
Event loop can make ansyncronous happen in JS code.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;When a first function is in callstack, first function’s callback function moves to background.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;After first function moved, second fucntion is completed in callstack.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;First function’s callback function moves to callback queue.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Event loop looks at callstack and callback queue.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;If there is a function in callback queue and callstack is all complete, first function in
callback queue moves to callstack and activate it.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;

&lt;p&gt;ps. call stack is the same as execution stack, control stack, run-time stack, machine stack, and the stack.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Siyoon Jung</name>
        
        
      </author>

      

      
        <category term="front-end" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">the difference between front-end and back-end</title>
      <link href="https://lulubeanana17.github.io/frontend-backend" rel="alternate" type="text/html" title="the difference between front-end and back-end" />
      <published>2021-09-15T04:40:00+12:00</published>
      <updated>2021-09-15T04:40:00+12:00</updated>
      <id>https://lulubeanana17.github.io/frontend-backend</id>
      <content type="html" xml:base="https://lulubeanana17.github.io/frontend-backend">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;This is Python table of contents &lt;/span&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./frontend-basic&quot;&gt;front-end-basic&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./python-control-statement&quot;&gt;front-end-control-statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;--&gt;

&lt;p&gt;A website itself is made of front-end part and back-end part.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;In front-end, there are roughly three languages (honestly html and css are not programming languages). HTML is a structure of the website, CSS is a design aspect, and Javascript creates moving features in their website.&lt;br /&gt;In Javascript section, they have Vanila.JS which is a pure Javascript, and also have some frameworks, such as React and Vue.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;In back-end, they manage the behind of websites, it is invisible. They roughly have database (MongoDB, Mysql), cloud (AWS, Azure), and back-end software (node.js or .NET).&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Siyoon Jung</name>
        
        
      </author>

      

      
        <category term="front-end" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Browser operating principle</title>
      <link href="https://lulubeanana17.github.io/browser-principle" rel="alternate" type="text/html" title="Browser operating principle" />
      <published>2021-09-14T04:40:00+12:00</published>
      <updated>2021-09-14T04:40:00+12:00</updated>
      <id>https://lulubeanana17.github.io/browser-principle</id>
      <content type="html" xml:base="https://lulubeanana17.github.io/browser-principle">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;This is Python table of contents &lt;/span&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./frontend-basic&quot;&gt;front-end-basic&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./python-control-statement&quot;&gt;front-end-control-statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;--&gt;

&lt;p&gt;Our website consists of front-end and back-end.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Front-end is about design aspect, which is made by html, css, and javascript or other frameworks.&lt;br /&gt;Back-end is about a structure that is invisible (like a pipeline behind a wall), it manages the website’s data.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;The website is based on a browser, which helps users access websites easily.&lt;br /&gt;
Every website owners have the websites’ original file, when Original file is changed, the website on internet will be changed.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;When users surf on the internet through a browser and find a website. Once they click the website, the browser requests a copy file of the website to the server, get the copy, and show it to the user. Moreover, the copied files can be changable because it is just copy.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Additionally, most website owners rent the server for deploying their website, because it costs a lot of money to execute their own server by themselves.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Siyoon Jung</name>
        
        
      </author>

      

      
        <category term="front-end" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
